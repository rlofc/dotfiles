# first, let's set the atmosphere
colorscheme cityscape

# we want line numbers
hook global WinCreate .* %{addhl number_lines}

# use = to select inner objects 
map global normal = <a-i>

# use top-left most key to move cursor to column 0
map global normal ` gh

# enable clang-auto-complete for cpp
hook global WinSetOption filetype=cpp %{
  clang-enable-autocomplete
}

# skip to next curly braces block
map global normal <a-b> 'f{m<a-;>;'

# select the next curly braces block
map global normal <a-`> 'ghF{ML' 

# use TAB to change selection cursor position
map global normal <tab> '<a-;>'

# use backspace in normal mote to alternate with last buffer
map global normal <backspace> 'eval ga'

# use F1 to open buffer list
map global normal <f1> 'eval :b '

# set tab size to exactly 4 spaces
map global insert <tab> '    '

# use f12 to run cmake
map global normal <f12> 'eval :cmake<ret>' 

# use our own custom edit candidates using shell find
def Edit -params 1 -shell-candidates %{ 
  find . -maxdepth 4 -type f -not -path "./build*" -not -path "./junk*"
} %{ edit %arg{1} }
map global normal <c-p> 'eval :Edit '

# turn c/c++ code on and off
map global normal <f5> "Z<a-;>O#if 0<esc>jzo<esc>i#endif<esc>"
map global normal <f6> "<a-/>#if 0<ret>Xd/#endif<ret>Xd"

# highlight occurances of current word under the cursor
decl -hidden regex curword
face CurWord default,rgb:300010
hook global WinCreate .* %{
    addhl show_matching
    addhl dynregex '%reg{/}' 0:+u
    addhl dynregex '%opt{curword}' 0:CurWord
}

hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec <space><a-i>w <a-k>^\w+$<ret>
        set buffer curword "\b\Q%val{selection}\E\b"
    } catch %{
        set buffer curword ''
    } }
}

# use cc command to create c++ source files
def -params .. cc  -docstring "Create new c++ source and header files." %{
    %sh{
         echo "#include \"$@.hh\"" >> "$@".cc
         printf %s\\n "
             eval %{
             new
             edit "$@".cc
             write
             edit "$@".hh
             write
             buffer $kak_bufname
         }"
     }
}


# hacky cmake command
def -params .. cmake -docstring "CMake utility wrapper" %{ %sh{
     while [ ! -f "CMakeLists.txt" ]; do cd ..; done
     output=$(mktemp -d -t kak-cmake.XXXXXXXX)/fifo
     output2=$(mktemp -d -t kak-cmake.XXXXXXXX)/fifo2
     mkfifo ${output}
     mkfifo ${output2}
     builddir=$(mktemp -d -t kak-cmake.XXXXXXXX)
     mypwd=$(pwd)
     ( eval cd ${builddir} && cmake ${mypwd} "$@" > ${output} 2>&1 ; make -j 4 > ${output2} 2>&1 ) > /dev/null 2>&1 < /dev/null &
     printf %s\\n "eval -try-client '$kak_opt_toolsclient' %{
               edit! -fifo ${output} -scroll *cmake*
               set buffer filetype cmake
               hook -group fifo buffer BufCloseFifo .* %{
                   nop %sh{ rm -r $(dirname ${output}) }
                   rmhooks buffer fifo
               }
               edit! -fifo ${output2} -scroll *make*
               set buffer filetype make
               hook -group fifo buffer BufCloseFifo .* %{
                   nop %sh{ rm -r $(dirname ${output2}) }
                   rmhooks buffer fifo
                   buffer *cmake*
		   eval make-next
               }
           }"
} 
}

hook global WinSetOption filetype=cpp %{ set window formatcmd 'clang-format' }
hook global WinSetOption filetype=h %{ set window formatcmd 'clang-format' }
hook global WinSetOption filetype=(?!cpp).* %{ }
hook global BufWritePre .*(cpp) %{ format }

def clean_whitespaces %{
  eval -draft -itersel %{
    try %{ exec -draft -itersel s <ret>d          } catch %{ echo '' }
    try %{ exec -draft -itersel s^\h+|\h+$<ret>d  } catch %{ echo '' }
    try %{ exec -draft -itersel s\h+<ret>c<space> } catch %{ echo '' }
  }
}
